        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
function main called 4 returned 100% blocks executed 74%
        4:    9:int main(){
        -:   10:
        -:   11:	int i; 					 	// counter
        -:   12:	int p, p2;					// indicating which player
        -:   13:	int pos;					// position
        -:   14:	int played;					// number of cards played from deck
        -:   15:	int deckSize;				// size of deck
        -:   16:	int odecksize;				// other player's deck size
        -:   17:	int pileSize;				// pile of usable cards
        4:   18:	int numPlayers = 2;  		// players for valid gamestate
        4:   19:	int numTests = 1; 		// large testing spread
        -:   20:	struct gameState g;			// gamestate, original
        -:   21:	struct gameState testState;		// gamestate under test
        4:   22:	int k[10] = {feast, gardens, embargo, remodel, tribute, mine, cutpurse, ambassador, great_hall, smithy};
        4:   23:	char testCard[] = "Smithy";	 // card under test
        -:   24:
        -:   25:
        -:   26:
        4:   27:	printf("---     TESTING CARD: %s   ---\n\n", testCard);
call    0 returned 100%
        -:   28:	
        8:   29:	for(i = 0; i < numTests; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   30:		
        -:   31:		// set hand basics for each game so the function can be called
        4:   32:		pos = -1;
        4:   33:		p = 0;
        4:   34:		p2 = 1;
        -:   35:
        -:   36:		// copy into a test state so I don't destroy the world
        4:   37:		initializeGame(numPlayers, k, 1000, &g);
call    0 returned 100%
        4:   38:		memcpy(&testState, &g, sizeof(struct gameState));
        -:   39:
        -:   40:
        -:   41:		// begin test
        4:   42:		deckSize = testState.handCount[p];										// how many are originally in hand before play
        4:   43:		odecksize = testState.deckCount[p2];									// how many are originall in other's hand before play
        4:   44:		played = testState.handCount[p] - testState.discardCount[p];			// how many cards were played
        4:   45:		pileSize = testState.deckCount[p];										// pile of non-trashed cards before play
        -:   46:		
        -:   47:		// play the smithy card, changes to counts will occur from this point out
        4:   48:		cardEffect(smithy, 0, 0, 0, &testState, 0, 0);
call    0 returned 100%
        -:   49:		
        -:   50:		// test to make sure player is at +3 cards
        4:   51:		printf("\nTest 1: Play Smithy and gain 3 cards:\n");
call    0 returned 100%
        4:   52:		if(testState.handCount[p] == g.handCount[p] + 2) // lose smithy (-1) and gain 3 more (+3) = 2
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:			printf("Passed. Expected hand count: %d   Hand count finish: %d\n", g.handCount[p] +2, testState.handCount[p]);
call    0 never executed
        -:   54:		else
        4:   55:			printf("FAILED. Deck size start: %d   Deck size finish: %d\n", g.handCount[p] +2, testState.handCount[p]);
call    0 returned 100%
        -:   56:
        -:   57:		//test to make sure the other player's hand didn't change. No cards given, none taken from
        4:   58:		printf("\nTest 2: Other player's deck size unchanged when smithy is drawn:\n");
call    0 returned 100%
        4:   59:		if(testState.deckCount[p2] == g.deckCount[p2])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   60:			printf("Passed. Deck size start: %d   Deck size finish: %d\n", g.deckCount[p2], testState.deckCount[p2]);
call    0 returned 100%
        -:   61:		else
    #####:   62:			printf("FAILED. Deck size start: %d   Deck size finish: %d\n", g.deckCount[p2], testState.deckCount[p2]);
call    0 never executed
        -:   63:
        -:   64:		//test to make sure the other player's hand didn't change. No cards given, none taken from
        4:   65:		printf("\nTest 2b: Other player's hand size unchanged when smithy is drawn:\n");
call    0 returned 100%
        4:   66:		if(testState.handCount[p2] == g.handCount[p2])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   67:			printf("Passed. Hand size start: %d   Hand size finish: %d\n", g.handCount[p2], testState.handCount[p2]);
call    0 returned 100%
        -:   68:		else
    #####:   69:			printf("FAILED. Hand size start: %d   Hand size finish: %d\n", g.handCount[p2], testState.handCount[p2]);
call    0 never executed
        -:   70:
        -:   71:		//test to make sure the cards come from own player's pile, and is not stealing from elsewhere
        4:   72:		printf("\nTest 3: Player is drawing from own pile:\n");
call    0 returned 100%
        4:   73:		if(g.deckCount[p] - 3 == testState.deckCount[p]) //  5 in deck, - 3 taken from it
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:			printf("Passed. Expected: %d   Deck size finish: %d\n", g.deckCount[p] - 3, testState.deckCount[p]);
call    0 never executed
        -:   75:		else
        4:   76:			printf("FAILED. Expected: %d   Deck size finish: %d\n", g.deckCount[p] - 3, testState.deckCount[p]);
call    0 returned 100%
        -:   77:
        -:   78:		//test to make sure the card is going to the played pile after use. Already established other players deck is unchanged
        4:   79:		printf("\nTest 4: Smithy card added to played pile after use:\n");
call    0 returned 100%
        4:   80:		if(testState.playedCardCount == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   81:			printf("Passed. Expected increase in played pile: %d     To played pile: %d\n", 1, testState.playedCardCount);
call    0 returned 100%
        -:   82:		else
    #####:   83:			printf("FAILED. Expected increase in played pile: %d   To played pile: %d\n", 1, testState.playedCardCount);
call    0 never executed
        -:   84:		
        -:   85:		//test for world state changes, will indicate if any victory cards have been given out inappropriately
        4:   86:		printf("\nTest 5: : Test supply counts for points and curses that should not have been distributed: \n ");
call    0 returned 100%
        4:   87:		if(g.supplyCount[estate] != testState.supplyCount[estate])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:			printf("FAILED. Estate Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[estate], testState.supplyCount[estate]);
call    0 never executed
        4:   89:		if(g.supplyCount[duchy] != testState.supplyCount[duchy])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   90:			printf("FAILED. Duchy Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[duchy], testState.supplyCount[duchy]);
call    0 never executed
        4:   91:		if(g.supplyCount[province] != testState.supplyCount[province])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   92:			printf("FAILED. Province Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[province], testState.supplyCount[province]);
call    0 never executed
        4:   93:		if(g.supplyCount[curse] != testState.supplyCount[curse])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   94:			printf("FAILED. Province Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[curse], testState.supplyCount[curse]);
call    0 never executed
        -:   95:		else
        4:   96:			printf("Passed. Supply counts for curses and victory cards are the same\n");
call    0 returned 100%
        -:   97:
        -:   98:		// test for changes in money supply that shouldn't have been activated, will test for money being given to players
        4:   99:		printf("\nTest 6: Test supply counts for treasure that should have been distributed: \n");
call    0 returned 100%
        4:  100:		if(g.supplyCount[copper] != testState.supplyCount[copper])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  101:			printf("FAILED. Estate Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[copper], testState.supplyCount[copper]);
call    0 never executed
        4:  102:		if(g.supplyCount[silver] != testState.supplyCount[silver])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  103:			printf("FAILED. Duchy Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[silver], testState.supplyCount[silver]);
call    0 never executed
        4:  104:		if(g.supplyCount[gold] != testState.supplyCount[gold])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  105:			printf("FAILED. Duchy Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[gold], testState.supplyCount[gold]);
call    0 never executed
        -:  106:		else
        4:  107:			printf("Passed. Supply counts for treasure cards are the same\n");
call    0 returned 100%
        -:  108:
        -:  109:	}
        -:  110:
        4:  111:	return 0;
        -:  112:}
