        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
function main called 2 returned 100% blocks executed 74%
        2:    9:int main(){
        -:   10:
        -:   11:	int i; 					 	// counter
        -:   12:	int p, p2;					// indicating which player
        -:   13:	int pos;					// position
        -:   14:	int numActions;				// number of numActions for player
        -:   15:	int deckSize;				// size of deck
        -:   16:	int odecksize;				// other player's deck size
        -:   17:	int pileSize;				// pile of usable cards
        2:   18:	int numPlayers = 2;  		// players for valid gamestate
        2:   19:	int numTests = 1; 		// large testing spread
        -:   20:	struct gameState g;			// gamestate, original
        -:   21:	struct gameState testState;		// gamestate under test
        2:   22:	int k[10] = {feast, gardens, embargo, remodel, tribute, mine, cutpurse, ambassador, great_hall, village};
        2:   23:	char testCard[] = "Village";	 // card under test
        -:   24:
        -:   25:
        -:   26:
        2:   27:	printf("---     TESTING CARD: %s     ---\n\n", testCard);
call    0 returned 100%
        -:   28:	
        4:   29:	for(i = 0; i < numTests; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   30:		
        -:   31:		// set hand basics for each game so the function can be called
        2:   32:		pos = -1;
        2:   33:		p = 0;
        2:   34:		p2 = 1;
        -:   35:
        -:   36:		// copy into a test state so I don't destroy the world
        2:   37:		initializeGame(numPlayers, k, 1000, &g);
call    0 returned 100%
        2:   38:		memcpy(&testState, &g, sizeof(struct gameState));
        -:   39:
        -:   40:
        -:   41:		// begin test
        2:   42:		deckSize = testState.handCount[p];										// how many are originally in hand before play
        2:   43:		odecksize = testState.deckCount[p2];									// how many are originall in other's hand before play
        2:   44:		numActions = testState.numActions;
        2:   45:		pileSize = testState.deckCount[p];										// pile of non-trashed cards before play
        -:   46:		
        -:   47:		// play the village card, changes to counts will occur from this point out
        2:   48:		cardEffect(village, 0, 0, 0, &testState, 0, 0);
call    0 returned 100%
        -:   49:		
        -:   50:		// test to make sure player gains one card. 
        2:   51:		printf("\nTest 1: Play Village and gain 1 card:\n");
call    0 returned 100%
        2:   52:		if(g.handCount[p] == testState.handCount[p]) // lose village (-1) and gain 1 (+1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   53:			printf("Passed. Expected hand count: %d   Hand count finish: %d\n", g.handCount[p], testState.handCount[p]);
call    0 returned 100%
        -:   54:		else
    #####:   55:			printf("FAILED. Deck size start: %d   Deck size finish: %d\n", g.handCount[p], testState.handCount[p]);
call    0 never executed
        -:   56:
        -:   57:		// test to make sure player gains 2 numActions
        2:   58:		printf("\nTest 2: Play Village and gain 2 numActions:\n");
call    0 returned 100%
        2:   59:		if(testState.numActions - g.numActions == 2) // start w/action 1, use action to play card (-1), gain 2
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   60:			printf("Passed. Expected Action count: %d   Action finish: %d\n", 2, testState.numActions - g.numActions);
call    0 returned 100%
        -:   61:		else
    #####:   62:			printf("FAILED. Expected Action count: %d   Action finish: %d\n", 2, testState.numActions - g.numActions);		
call    0 never executed
        -:   63:
        -:   64:		//test to make sure the other player's hand didn't change. No cards given, none taken from
        2:   65:		printf("\nTest 3: Other player's deck size unchanged when village is drawn:\n");
call    0 returned 100%
        2:   66:		if(testState.deckCount[p2] == odecksize)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   67:			printf("Passed. Deck size start: %d   Deck size finish: %d\n", odecksize, testState.deckCount[p2]);
call    0 returned 100%
        -:   68:		else
    #####:   69:			printf("FAILED. Deck size start: %d   Deck size finish: %d\n", odecksize, testState.deckCount[p2]);
call    0 never executed
        -:   70:
        -:   71:		//test to make sure the other player's hand didn't change. No cards given, none taken from
        2:   72:		printf("\nTest 3b: Other player's hand size unchanged when village is drawn:\n");
call    0 returned 100%
        2:   73:		if(testState.handCount[p2] == g.handCount[p2])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   74:			printf("Passed. Hand size start: %d   Hand size finish: %d\n", g.handCount[p2], testState.handCount[p2]);
call    0 returned 100%
        -:   75:		else
    #####:   76:			printf("FAILED. Hand size start: %d   Hand size finish: %d\n", g.handCount[p2], testState.handCount[p2]);
call    0 never executed
        -:   77:
        -:   78:		//test to make sure the cards come from own player's pile, and is not stealing from elsewhere
        2:   79:		printf("\nTest 4: Player is drawing from own pile:\n");
call    0 returned 100%
        2:   80:		if(g.deckCount[p] -1 == testState.deckCount[p]) //  5 in deck - 1 taken from it
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   81:			printf("Passed. Expected: %d   Deck size finish: %d\n", g.deckCount[p] - 1, testState.deckCount[p]);
call    0 returned 100%
        -:   82:		else
    #####:   83:			printf("FAILED. Expected: %d   Deck size finish: %d\n", g.deckCount[p] - 1, testState.deckCount[p]);
call    0 never executed
        -:   84:
        -:   85:		//test to make sure the card is going to the played pile after use. Already established other players deck is unchanged
        2:   86:		printf("\nTest 5: Village card added to played pile after use:\n");
call    0 returned 100%
        2:   87:		if(testState.playedCardCount == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   88:			printf("Passed. Expected increase in played pile: %d     To played pile: %d\n", 1, testState.playedCardCount);
call    0 returned 100%
        -:   89:		else
    #####:   90:			printf("FAILED. Expected increase in played pile: %d   To played pile: %d\n", 1, testState.playedCardCount);
call    0 never executed
        -:   91:		
        -:   92:		//test for world state changes, will indicate if any victory cards have been given out inappropriately
        2:   93:		printf("\nTest 6: : Test supply counts for points and curses that should not have been distributed: \n ");
call    0 returned 100%
        2:   94:		if(g.supplyCount[estate] != testState.supplyCount[estate])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   95:			printf("FAILED. Estate Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[estate], testState.supplyCount[estate]);
call    0 never executed
        2:   96:		if(g.supplyCount[duchy] != testState.supplyCount[duchy])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   97:			printf("FAILED. Duchy Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[duchy], testState.supplyCount[duchy]);
call    0 never executed
        2:   98:		if(g.supplyCount[province] != testState.supplyCount[province])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   99:			printf("FAILED. Province Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[province], testState.supplyCount[province]);
call    0 never executed
        2:  100:		if(g.supplyCount[curse] != testState.supplyCount[curse])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  101:			printf("FAILED. Province Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[curse], testState.supplyCount[curse]);
call    0 never executed
        -:  102:		else
        2:  103:			printf("Passed. Supply counts for curses and victory cards are the same\n");
call    0 returned 100%
        -:  104:
        -:  105:		// test for changes in money supply that shouldn't have been activated, will test for money being given to players
        2:  106:		printf("\nTest 7: Test supply counts for treasure that should have been distributed: \n");
call    0 returned 100%
        2:  107:		if(g.supplyCount[copper] != testState.supplyCount[copper])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  108:			printf("FAILED. Copper Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[copper], testState.supplyCount[copper]);
call    0 never executed
        2:  109:		if(g.supplyCount[silver] != testState.supplyCount[silver])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  110:			printf("FAILED. Silver Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[silver], testState.supplyCount[silver]);
call    0 never executed
        2:  111:		if(g.supplyCount[gold] != testState.supplyCount[gold])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:			printf("FAILED. Gold Count Mismatch. Expected: %d  Received: %d\n", g.supplyCount[gold], testState.supplyCount[gold]);
call    0 never executed
        -:  113:		else
        2:  114:			printf("Passed. Supply counts for treasure cards are the same\n");
call    0 returned 100%
        -:  115:
        -:  116:	}
        -:  117:
        2:  118:	return 0;
        -:  119:}
