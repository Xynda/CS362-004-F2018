        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Description: A random test generator for the adventurer card.
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:#include <time.h>
        -:   10:#include <assert.h>
        -:   11:
        -:   12:
function main called 1 returned 100% blocks executed 82%
        1:   13:int main () {
        -:   14:
        -:   15:   struct gameState g;
        -:   16:
        1:   17:   int seed = 1000;
        1:   18:   int numTestsPassed = 0, passedAllTestsFlag = 0, testDraw = 0, failedDiscard = 0;
        1:   19:   int numPlayers = 2, currPlayer = 0, deckSize, handSize, randCard, randAllowedCard;
        -:   20:   int trCopper, trSilver, trGold;
        1:   21:   int beforeCoins = 0, afterCoins = 0;
        -:   22:   int i, j, k;
        1:   23:   int choice1 = 0, choice2 = 0, choice3 = 0, handPos = 0, bonus = 0;
        -:   24:
        1:   25:   int allowedCards[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   26:
        1:   27:   srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:
   123457:   30:   for (i = 0; i < 123456; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:
        -:   32:      //Randomly intialize the game state. Then make sure the needed variables are sane.
   123456:   33:      initializeGame(numPlayers, allowedCards, seed, &g);
call    0 returned 100%
   123456:   34:      beforeCoins = 0;
   123456:   35:      afterCoins = 0;
        -:   36:
   123456:   37:      deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
   123456:   38:      handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   39:
   123456:   40:      g.deckCount[0] = deckSize - handSize;
   123456:   41:      g.handCount[0] = handSize;
        -:   42:
        -:   43:
        -:   44:
        -:   45:      //Fill up each player's deck with random cards
   370368:   46:      for (j = 0; j < numPlayers; j++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   47:
 16865057:   48:	 for (k = 0; k < g.deckCount[j]; k++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   49:
 16618145:   50:	    randCard = rand() % 51;	//# of diff cards possible + 1
call    0 returned 100%
        -:   51:
 16618145:   52:	    if (randCard == 1) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   326026:   53:	       g.deck[j][k] = copper;
        -:   54:	    }
 16292119:   55:	    else if (randCard == 2) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   326130:   56:	       g.deck[j][k] = silver;
        -:   57:	    }
 15965989:   58:	    else if (randCard == 3) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   325059:   59:	       g.deck[j][k] = gold;
        -:   60:	    }
        -:   61:	    else {
 15640930:   62:	       randAllowedCard = rand() % 10;
call    0 returned 100%
 15640930:   63:	       g.deck[j][k] = allowedCards[randAllowedCard];
        -:   64:	    }
        -:   65:
        -:   66:	 }
        -:   67:
        -:   68:      }
        -:   69:
        -:   70:
        -:   71:      //Note the current state of the player's treasure
 15584866:   72:      for (j = 0; j < g.handCount[currPlayer]; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 15461410:   73:	 if (g.hand[currPlayer][j] == copper || g.hand[currPlayer][j] == silver || g.hand[currPlayer][j] == gold) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
branch  4 taken 71% (fallthrough)
branch  5 taken 29%
 13681297:   74:	    beforeCoins += 1;
        -:   75:	 }
        -:   76:      }
        -:   77:
        -:   78:
        -:   79:      //Play the card
   123456:   80:      cardEffect(adventurer, choice1, choice2, choice3, &g, handPos, &bonus);
call    0 returned 100%
        -:   81:
        -:   82:
        -:   83:      //Note the state of the player's treasure now
 15688424:   84:      for (j = 0; j < g.handCount[currPlayer]; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 15564968:   85:	 if (g.hand[currPlayer][j] == copper || g.hand[currPlayer][j] == silver || g.hand[currPlayer][j] == gold) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
branch  4 taken 71% (fallthrough)
branch  5 taken 29%
 13787989:   86:	    afterCoins += 1;
        -:   87:	 }
        -:   88:      }
        -:   89:
        -:   90:
   123456:   91:      trCopper = 0;
   123456:   92:      trSilver = 0;
   123456:   93:      trGold = 0;
        -:   94:
        -:   95:
        -:   96:      //Note the discard pile state
  1838261:   97:      for (j = 0; j < g.discardCount[currPlayer]; j++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:   98:
  1714805:   99:	 if (g.discard[currPlayer][j] == copper) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  100:	    trCopper += 1;
        -:  101:	 }
  1714805:  102:	 else if (g.discard[currPlayer][j] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  103:	    trSilver += 1;
        -:  104:	 }
  1714805:  105:	 else if (g.discard[currPlayer][j] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:	    trGold += 1;
        -:  107:	 }
        -:  108:
        -:  109:      }
        -:  110:
        -:  111:
        -:  112:      //Tests
   123456:  113:      passedAllTestsFlag = 1;
        -:  114:
   123456:  115:      printf("Testing Adventurer card...\n");
call    0 returned 100%
        -:  116:
   123456:  117:      if (afterCoins != (beforeCoins + 2)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   123456:  118:	 printf("\tCards drawn - FAIL\n");
call    0 returned 100%
   123456:  119:	 testDraw++;
   123456:  120:	 passedAllTestsFlag = 0;
        -:  121:      }
        -:  122:      else {
    #####:  123:	 printf("\tCards drawn - PASS\n");
call    0 never executed
        -:  124:      }
        -:  125:      
   123456:  126:      if (afterCoins < beforeCoins) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  127:	 printf("\tCards count - FAIL\n");
call    0 never executed
    #####:  128:	 testDraw++;
    #####:  129:	 passedAllTestsFlag = 0;
        -:  130:      }
        -:  131:      else {
   123456:  132:	 printf("\tCards count - PASS\n");
call    0 returned 100%
        -:  133:      }
        -:  134:
        -:  135:
   123456:  136:      if (trGold != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  137:	 printf("\tGold - FAIL\n");
call    0 never executed
    #####:  138:	 failedDiscard++;
    #####:  139:	 passedAllTestsFlag = 0;
        -:  140:      }
        -:  141:      else {
   123456:  142:	 printf("\tGold - PASS\n");
call    0 returned 100%
        -:  143:      }
        -:  144:
   123456:  145:      if (trSilver != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  146:	 printf("\tSilver - FAIL\n");
call    0 never executed
    #####:  147:	 failedDiscard++;
    #####:  148:	 passedAllTestsFlag = 0;
        -:  149:      }
        -:  150:      else {
   123456:  151:	 printf("\tSilver - PASS\n");
call    0 returned 100%
        -:  152:      }
        -:  153:
   123456:  154:      if (trCopper != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  155:	 printf("\tCopper - FAIL\n");
call    0 never executed
    #####:  156:	 failedDiscard++;
    #####:  157:	 passedAllTestsFlag = 0;
        -:  158:      }
        -:  159:      else {
   123456:  160:	 printf("\tCopper - PASS\n");
call    0 returned 100%
        -:  161:      }
        -:  162:
        -:  163:
   123456:  164:      if (passedAllTestsFlag == 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  165:	 printf("All tests passed!!\n\n");
call    0 never executed
    #####:  166:	 numTestsPassed++;
        -:  167:      }
        -:  168:
        -:  169:   }
        -:  170:
        1:  171:   printf("Adventurer tests summary:\n");
call    0 returned 100%
        1:  172:   printf("\tPASSED: %d\n", numTestsPassed);
call    0 returned 100%
        1:  173:   printf("\tFAILED (draw): %d\n", testDraw);
call    0 returned 100%
        1:  174:   printf("\tFAILED (discard): %d\n\n", failedDiscard);
call    0 returned 100%
        -:  175:
        -:  176:   
        -:  177:
        1:  178:   return 0;
        -:  179:
        -:  180:}
