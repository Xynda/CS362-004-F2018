        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:// Description: A random test generator for the great hall card.
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:#include <time.h>
        -:   10:#include <assert.h>
        -:   11:
        -:   12:
function main called 3 returned 100% blocks executed 90%
        3:   13:int main () {
        -:   14:
        -:   15:   struct gameState g;
        -:   16:
        3:   17:   int seed = 1000;
        3:   18:   int numTestsPassed = 0, passedAllTestsFlag = 0;
        3:   19:   int numPlayers = 2, currPlayer = 0;
        -:   20:   int deckSize, handSize, startHand, currHand, startNumActions, currNumActions;
        3:   21:   int failedHandCount = 0, failedActionsCount = 0;
        3:   22:   int i = 0;
        3:   23:   int choice1 = 0, choice2 = 0, choice3 = 0, handPos = 0, bonus = 0;
        -:   24:
        3:   25:   int allowedCards[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   26:
        3:   27:   srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:
   370371:   30:   for (i = 0; i < 123456; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:
        -:   32:      //randomly intialize the game state. then make sure the needed variables are sane.
   370368:   33:      initializeGame(numPlayers, allowedCards, seed, &g);
call    0 returned 100%
        -:   34:
   370368:   35:      deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
   370368:   36:      handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   37:
   370368:   38:      g.deckCount[0] = deckSize - handSize;
   370368:   39:      g.handCount[0] = handSize;
   370368:   40:      g.numActions = rand() % 10;
call    0 returned 100%
   370368:   41:      handPos = g.hand[currPlayer][g.handCount[currPlayer]-1];
        -:   42:
        -:   43:
        -:   44:      //Note the current state before playing the card
   370368:   45:      startHand = g.handCount[0];
   370368:   46:      startNumActions = g.numActions;
        -:   47:
        -:   48:
        -:   49:      //Play the card
   370368:   50:      cardEffect(great_hall, choice1, choice2, choice3, &g, handPos, &bonus);
call    0 returned 100%
        -:   51:
        -:   52:
        -:   53:      //Note the state after playing the card
   370368:   54:      currHand = g.handCount[0];
   370368:   55:      currNumActions = g.numActions;
   370368:   56:      if (rand() % 100 == 1) {	//Test for an intentionally bad condition
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     3731:   57:	 currNumActions += 1;
        -:   58:      }
        -:   59:
        -:   60:
        -:   61:      //Tests
   370368:   62:      passedAllTestsFlag = 1;
        -:   63:
   370368:   64:      printf("Testing Great Hall card...\n");
call    0 returned 100%
        -:   65:
   370368:   66:      if (currHand != startHand) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     4974:   67:	 printf("\tCards drawn - FAIL\n");
call    0 returned 100%
     4974:   68:	 failedHandCount++;
     4974:   69:	 passedAllTestsFlag = 0;
        -:   70:      }
        -:   71:      else {
   365394:   72:	 printf("\tCards drawn - PASS\n");
call    0 returned 100%
        -:   73:      }
        -:   74:
   370368:   75:      if (currNumActions != startNumActions + 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   370368:   76:	 printf("\tActions - FAIL\n");
call    0 returned 100%
   370368:   77:	 failedActionsCount++;
   370368:   78:	 passedAllTestsFlag = 0;
        -:   79:      }
        -:   80:      else {
    #####:   81:	 printf("\tActions - PASS\n");
call    0 never executed
        -:   82:      }
        -:   83:
        -:   84:
   370368:   85:      if (passedAllTestsFlag == 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   86:	 printf("All tests passed!!\n");
call    0 never executed
    #####:   87:	 numTestsPassed++;
        -:   88:      }
        -:   89:
        -:   90:   }
        -:   91:
        -:   92:      
        3:   93:   printf("Great Hall tests summary:\n");
call    0 returned 100%
        3:   94:   printf("\tPASSED: %d\n", numTestsPassed);
call    0 returned 100%
        3:   95:   printf("\tFAILED (hand): %d\n", failedHandCount);
call    0 returned 100%
        3:   96:   printf("\tFAILED (actions): %d\n\n", failedActionsCount);
call    0 returned 100%
        -:   97:
        -:   98:   
        -:   99:
        3:  100:   return 0;
        -:  101:
        -:  102:}
